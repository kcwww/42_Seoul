#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

#include <stdlib.h>

char* ft_substr(char const* s, unsigned int start, size_t len)
{
	char* str;
	int		i;
	int		j;

	str = (char*)malloc(sizeof(char) * (len + 1));
	if (str == 0)
		return (0);
	i = 0;
	while (i < start - 1)
		i++;
	j = 0;
	while (j < len && s[i])
	{
		str[j] = s[i];
		j++;
		i++;
	}
	str[j] = 0;
	return (str);
}

char* ft_strjoin(char const* s1, char const* s2)
{
	char* re;
	int		i;
	int		j;

	i = ft_strlen(s1);
	j = ft_strlen(s2);
	re = (char*)malloc(sizeof(char) * (i + j + 1));
	if (re == 0)
		return (0);
	ft_strlcpy(re, s1, i + 1);
	ft_strlcpy(re + i, s2, j + 1);
	return (re);
}

char* ft_strtrim(char const* s1, char const* set)
{
	int		start;
	int		end;
	char	*re;

	start = 0;
	end = ft_strlen(s1);
	while (s1[start] && ft_strchr(set, s1[start]))
		start++;
	while (end > 0 && ft_strchr(set, s1[end - 1]))
		end--;
	re = (char*)malloc(sizeof(char) * (end - start + 1));
	if (re == 0)
		return (0);
	ft_strlcpy(re, s1 + start, end - start + 1);
	return(re);
}

char* ft_itoa(int n)
{
	int		len;
	int		num;
	char	*re;

	len = 0;
	if (n < 0)
		len++;
	num = n;
	while (num)
	{
		len++;
		num /= 10;
	}
	re = (char*)malloc(sizeof(char) * (len + 1));
	if (re == 0)
		return (0);
	re[len] = 0;
	if (n < 0)
	{
		re[num] = '-';
		num++;
	}
	while (n)
	{
		re[num] = n % 10;
		num++;
		n /= 10;
	}
	return (re);
}


//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

char	**ft_split
